class ChatContainer {
	pictureContainer = null;
	htmlContainer = null;
	htmlHistory = null;
	htmlInputBox = null;
	htmlInfoBox = null;
	name = 'NoName';
	connectionURL = '';
	peerJSConnection = null;
	peerJSId = '';
	commands = {
		'/clear': (args) => {
			this.htmlHistory.innerHTML = '';
		},
		'/help': (args) => {
			printHelp();
		},
		'/sync': (args) => {
			if (this.peerJSConnection != null) {
				let allImages = this.pictureContainer
			.getAllImagesData();
				this.peerJSConnection.send({
					type: 'start-sync'
				});
				allImages.forEach(dataURL => {
					this.peerJSConnection.send({
						type: 'image',
						data: dataURL
					});
				});
				this.htmlHistory.innerHTML +=
					'<div>Images synced to the other player</div>';
			} else {
				this.htmlHistory.innerHTML +=
					'<div>No connection to sync images</div>';
			}
		},
		'/name': (args) => {
			this.name = args;
			this.htmlHistory.innerHTML += '<div> your name is set to ' +
				this.name + '</div>';
		},
		'/id': (args) => {
			this.htmlHistory.innerHTML += '<div> your id is ' + this
				.peerJSId + '</div>';
		},
		'/bigger': (args) => {
			if (this.pictureContainer != null) {
				this.pictureContainer.biggerPics(1);
			}
		},
		'/smaller': (args) => {
			if (this.pictureContainer != null) {
				this.pictureContainer.smallerPics(1);
			}
		},
	};
	constructor() {
		this.htmlContainer = document.createElement('div');
		this.htmlContainer.id = 'chat-container';
		this.htmlContainer.style.background = Config.colors.chatContainer
			.background;
		this.htmlContainer.style.width = '49%';
		this.htmlContainer.style.height = '98%';
		this.htmlContainer.style.margin = '0.5%'
		this.htmlContainer.style.padding = '0.5%'
		this.htmlContainer.style.boxSizing = 'border-box';
		document.body.appendChild(this.htmlContainer);
		this.htmlContainer.style.display = 'grid';
		this.htmlContainer.style.gridTemplateRows = '1fr 18fr 1fr';
		this.htmlContainer.style.gap = '1%';
		this.htmlInfoBox = document.createElement('div');
		this.htmlInfoBox.id = 'chat-info';
		this.htmlInfoBox.style.fontSize = '100%';
		this.htmlInfoBox.style.background = Config.colors.chatContainer
			.infoBox;
		this.htmlInfoBox.style.color = Config.colors.chatContainer
		.textColor;
		this.htmlInfoBox.style.width = '100%';
		this.htmlInfoBox.style.height = '100%';
		this.htmlInfoBox.style.display = 'flex';
		this.htmlInfoBox.style.alignItems = 'center';
		this.htmlInfoBox.style.justifyContent = 'flex-start';
		this.htmlInfoBox.style.textAlign = 'center';
		this.htmlContainer.appendChild(this.htmlInfoBox);
		this.htmlHistory = document.createElement('div');
		this.htmlHistory.style.fontSize = '100%';
		this.htmlHistory.style.color = Config.colors.chatContainer
		.textColor;
		this.htmlHistory.id = 'chat-history';
		this.htmlHistory.style.background = Config.colors.chatContainer
			.history;
		this.htmlHistory.style.width = '100%';
		this.htmlHistory.style.height = '100%';
		this.htmlHistory.style.overflowX = 'auto';
		this.htmlHistory.style.overflowY = 'auto';
		this.htmlContainer.appendChild(this.htmlHistory);
		this.htmlInputBox = document.createElement('input');
		this.htmlInputBox.type = 'text';
		this.htmlInputBox.id = 'chat-input';
		this.htmlInputBox.style.color = Config.colors.chatContainer
			.textColor;
		this.htmlInputBox.style.fontSize = '100%';
		this.htmlInputBox.style.background = Config.colors.chatContainer
			.input;
		this.htmlInputBox.style.width = '100%';
		this.htmlInputBox.style.height = '100%';
		this.htmlContainer.appendChild(this.htmlInputBox);
		let zoomOut = document.createElement('button');
		zoomOut.textContent = '-';
		zoomOut.style.fontSize = '1.5vh';
		zoomOut.style.width = '6%';
		zoomOut.style.margin = '1%';
		zoomOut.style.padding = '1%';
		zoomOut.style.background = Config.colors.pictureContainer
			.buttonColor;
		zoomOut.style.color = Config.colors.chatContainer.textColorDark;
		zoomOut.onclick = () => {
			if (this.pictureContainer != null) this.pictureContainer
				.smallerPics();
		};
		this.htmlInfoBox.appendChild(zoomOut);
		let zoomIn = document.createElement('button');
		zoomIn.textContent = '+';
		zoomIn.style.fontSize = '1.5vh';
		zoomIn.style.width = '6%';
		zoomIn.style.margin = '1%';
		zoomIn.style.padding = '1%';
		zoomIn.style.background = Config.colors.pictureContainer
		.buttonColor;
		zoomIn.style.color = Config.colors.chatContainer.textColorDark;
		zoomIn.onclick = () => {
			if (this.pictureContainer != null) this.pictureContainer
				.biggerPics();
		};
		this.htmlInfoBox.appendChild(zoomIn);
		this.htmlInputBox.addEventListener('keydown', (event) => {
			if (event.key == 'Enter') {
				let messageText = this.htmlInputBox.value;
				if (messageText != '') {
					if (messageText[0] == '/') {
						this.handleCommand(messageText.split(' ')[
							0], messageText.split(' ').slice(1)
							.join(' '));
					} else {
						let name = this.name;
						if (this.peerJSId != '' && this.name ==
							'NoName') name = this.peerJSId;
						this.htmlHistory.innerHTML += '<div> [' +
							name + '] ' + messageText + '</div>';
						if (this.peerJSConnection != null) {
							this.peerJSConnection.send('[' + name +
								'] ' + messageText);
						}
					}
					this.htmlInputBox.value = '';
					this.htmlHistory.scrollTop = this.htmlHistory
						.scrollHeight;
				}
			}
		});
	}
	handleCommand(command, args) {
		try {
			this.commands[command](args);
		} catch (e) {
			this.htmlHistory.innerHTML +=
				`<div>${"failed to execute the command: " + command}</div>`;
		}
	}
	updateLayout(container) {
		if (window.innerWidth > window.innerHeight) {
			this.htmlInfoBox.style.fontSize = '100%';
			container.style.width = '49%';
			container.style.height = '98%';
		} else {
			this.htmlInfoBox.style.fontSize = '50%';
			container.style.width = '98%';
			container.style.height = '49%';
		}
	}
	printHelp() {
		this.htmlHistory.innerHTML += `<div>
			–ü—Ä–∏–≤–µ—Ç!<br>
			–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –º–æ—è –≤–µ—Ä—Å–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –Ω–∞—Å—Ç–æ–ª–∫–∏, Guess Who!<br>
			–≠—Ç–æ –∏–≥—Ä–∞ –¥–ª—è –¥–≤–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤, —Ç–∞–∫ —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞.
			–ß—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π [üìãÔ∏èURL].
			–û–Ω–∞ —Å–∫–æ–ø–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–≤–æ–µ–º—É –¥—Ä—É–≥—É –∫–∞–∫–∏–º-–ª–∏–±–æ –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤.<br>
			–ü–æ–∫–∞ —á—Ç–æ –Ω–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
			–ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–µ–±–µ –∏–º—è, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /name –ò–º—è –≤ —á–∞—Ç–µ.<br>
			–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥: /sync - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥—Ä—É–≥–∞ —Å–æ —Å–≤–æ–∏–º–∏.
			–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∏—Ç –µ–≥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç –∏—Ö —Ç–≤–æ–∏–º–∏. /clear - –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç.<br>
			–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–Ω–æ–≤–∞ –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ /help.<br>
			–ò–≥—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–Ω–Ω–µ–π-—Ä–∞–Ω–Ω–µ–π alpha, –ø–æ—ç—Ç–æ–º—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã,
			–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –±–∞—Ä–∞—Ö–ª–∏—Ç—å (—Ö–æ—Ç—è —á—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç,
			—á—Ç–æ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∞–ª–∏—è—Ö –†–§).<br> –¢–∞–∫ –∏–ª–∏ –∏–Ω–∞—á–µ, –≤ –∏–≥—Ä—É —É–∂–µ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å
			–∏ –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ. –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –∏ —Ç–≤–æ–µ–º—É –¥—Ä—É–≥—É –æ–Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!
		</div>`;
	}
}
